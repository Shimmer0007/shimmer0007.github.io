<!DOCTYPE html>
<html lang="zh-CN">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>赛博塔罗牌 0x7F</title>
    <style>
        :root {
            --deep-blue: #0A0A2A;
            --gold: #DAA520;
            --neon-gold: #FFD700;
        }

        body {
            margin: 0;
            background: var(--deep-blue);
            font-family: 'Courier New', monospace;
            min-height: 100vh;
            overflow-x: hidden;
            color: var(--gold);
        }

        .glitch-title {
            text-align: center;
            color: var(--neon-gold);
            animation: glitch 2s infinite;
            text-shadow: 0.05em 0 0 var(--gold),
                        -0.05em -0.05em 0 var(--neon-gold);
        }

        .container {
            display: flex;
            flex-direction: column;
            align-items: center;
            position: relative;
            z-index: 1;
            backdrop-filter: blur(10px);
            background-color: rgba(10, 10, 42, 0.5);
            padding: 20px;
            border-radius: 15px;
            width: 90%;
            max-width: 800px;
            margin-top: 50px;
        }

        .cyber-button {
            padding: 15px 30px;
            background: transparent;
            border: 3px solid var(--neon-gold);
            color: var(--neon-gold);
            font-size: 1.2em;
            cursor: pointer;
            position: relative;
            transition: 0.3s;
            margin: 20px;
            box-shadow: 0 0 15px var(--neon-gold);
        }

        .cards-container {
            display: flex;
            gap: 20px;
            flex-wrap: wrap;
            justify-content: center;
            padding: 20px;
        }

        .hex-card {
            width: 200px;
            height: 240px;
            position: relative;
            cursor: pointer;
            transform-style: preserve-3d;
            transition: transform 0.8s;
            clip-path: polygon(50% 0%, 100% 25%, 100% 75%, 50% 100%, 0% 75%, 0% 25%);
        }

        .hex-card.flipped {
            transform: rotateY(180deg);
        }

        .card-face {
            position: absolute;
            width: 100%;
            height: 100%;
            backface-visibility: hidden;
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            border: 2px solid var(--neon-gold);
            background: rgba(10, 10, 42, 0.9);
            box-shadow: 0 0 20px var(--neon-gold);
            padding: 15px;
        }

        .card-back {
            transform: rotateY(180deg);
            color: var(--neon-gold);
        }

        .ascii-art {
            white-space: pre;
            font-size: 8px;
            opacity: 0.7;
        }

        /* 动态背景样式 */
        .matrix-bg {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            pointer-events: none;
            opacity: 0.1;
        }

        @keyframes glitch {
            0% { clip-path: inset(20% 0 30% 0); }
            20% { clip-path: inset(10% 0 40% 0); }
            100% { clip-path: inset(0 0 0 0); }
        }

        @media (max-width: 768px) {
            .hex-card {
                width: 150px;
                height: 180px;
            }
        }

        /* 新增卡牌入场动画 */
        @keyframes cardAppear {
            0% {
                transform: translateY(100vh) rotateZ(180deg);
                opacity: 0;
            }
            100% {
                transform: translateY(0) rotateZ(0);
                opacity: 1;
            }
        }

        /* 鼠标拖尾尾迹 */
        .trail {
            position: absolute;
            width: 10px;
            height: 10px;
            background: var(--neon-gold);
            border-radius: 50%;
            pointer-events: none;
            filter: blur(5px);
            mix-blend-mode: screen;
        }
    </style>
</head>
<body>
    <canvas class="matrix-bg" id="matrix"></canvas>
    <div class="container">
        <h1 class="glitch-title">▲ CYBER TAROT 0x7F ▼</h1>
        <button class="cyber-button" onclick="drawCards()">INITIALIZE SYSTEM</button>
        <div class="cards-container" id="cards"></div>
    </div>

    <script>
        // 赛博塔罗牌数据
        const cyberTarot = [
            {
                name: "03-量子幽灵",
                symbol: "🜯",
                keywords: ["数据残留", "记忆重构", "协议漏洞"],
                meaning: "被删除的代码仍在量子缓存中徘徊... STATUS_0x7F_NEUROMANCE"
            },
            {
                name: "15-神经接口",
                symbol: "⧈",
                keywords: ["脑机超频", "意识入侵", "认知过载"],
                meaning: "你的脑波正在被未验证的API读取... STATUS_0x8A_SYNTHDREAM"
            },
            {
                name: "07-赛博女巫",
                symbol: "♆",
                keywords: ["协议破解", "数据占卜", "漏洞预言"],
                meaning: "防火墙后传来未知的加密耳语... STATUS_0x3E_CRYPTOLINGER"
            },
            {
                name: "22-加密先知",
                symbol: "⌗",
                keywords: ["区块链预言", "零知识证明", "去中心化"],
                meaning: "智能合约中检测到自我执行的末日条款... STATUS_0xBE_DECENTRAL"
            },
            // 补充更多卡牌数据（至少保证有3张）
            // ...（其他17张卡牌数据）
        ];

        // 初始化语音合成
        const synth = window.speechSynthesis;

        function createHexCard(card) {
            const cardEl = document.createElement('div');
            cardEl.className = 'hex-card';
            cardEl.innerHTML = `
                <div class="card-face">
                    <h2>${card.symbol}</h2>
                </div>
                <div class="card-face card-back">
                    <h3>${card.name}</h3>
                    <div class="ascii-art">${generateAsciiArt()}</div>
                    <p>${card.meaning}</p>
                </div>
            `;
            cardEl.onclick = () => {
                if (!cardEl.classList.contains('flipped')) {
                    cardEl.style.transform = 'rotateY(180deg)';
                    cardEl.classList.add('flipped');
                    speakText(card.meaning);
                }
            };
            return cardEl;
        }

        function drawCards() {
            const cardsContainer = document.getElementById('cards');
            cardsContainer.innerHTML = '';

            // 确保每次抽取不同卡牌
            const shuffled = [...cyberTarot].sort(() => 0.5 - Math.random());
            const selectedCards = shuffled.slice(0, 3);

            selectedCards.forEach((card, index) => {
                const cardElement = createHexCard(card);
                // 添加抽牌动画
                cardElement.style.animation = `cardAppear 0.5s ${index * 0.2}s forwards`;
                cardsContainer.appendChild(cardElement);
            });
        }

        function generateAsciiArt() {
            const patterns = ['◢◣◤◥', '░▒▓', '▚▞', '▩▦'];
            return Array(20).fill()
                .map(() => patterns[Math.floor(Math.random() * patterns.length)])
                .join('\n');
        }

        function speakText(text) {
            if (synth.speaking) synth.cancel();

            const utterance = new SpeechSynthesisUtterance();
            utterance.text = text + ` [${generateStatusCode()}]`; // 添加随机状态码
            utterance.lang = 'zh-CN';
            synth.speak(utterance);
        }

        // 网络状态码生成器
        function generateStatusCode() {
            const codes = ['0x7F_NEUROMANCE', '0x8A_SYNTHDREAM', '0x3E_CRYPTOLINGER'];
            return `STATUS_${codes[Math.floor(Math.random() * codes.length)]}`;
        }

        // 二进制粒子特效
        class BinaryParticle {
            constructor(canvas) {
                this.canvas = canvas;
                this.ctx = canvas.getContext('2d');
                this.particles = [];
                this.bindEvents();
                this.resize();
                window.addEventListener('resize', () => this.resize());
            }

            resize() {
                this.canvas.width = window.innerWidth;
                this.canvas.height = window.innerHeight;
            }

            bindEvents() {
                this.canvas.addEventListener('mousemove', (e) => {
                    this.particles.push({
                        x: e.clientX,
                        y: e.clientY,
                        life: 1,
                        speed: Math.random() * 3 + 2,
                        char: Math.random() > 0.5 ? '0' : '1'
                    });
                });
            }

            draw() {
                this.ctx.fillStyle = 'rgba(0,0,0,0.05)';
                this.ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);

                this.particles.forEach((p, i) => {
                    this.ctx.fillStyle = `rgba(255,215,0,${p.life})`;
                    this.ctx.fillText(p.char, p.x, p.y);
                    p.y -= p.speed;
                    p.life -= 0.02;
                    if (p.life <= 0) this.particles.splice(i, 1);
                });

                requestAnimationFrame(() => this.draw());
            }
        }

        // 鼠标拖尾尾迹
        let mouseTrails = [];

        document.addEventListener('mousemove', (e) => {
            mouseTrails.push({ x: e.clientX, y: e.clientY });
            setTimeout(() => {
                mouseTrails.shift();
            }, 50);
        });

        function updateMouseTrails() {
            mouseTrails.forEach(trail => {
                const trailDiv = document.createElement('div');
                trailDiv.className = 'trail';
                trailDiv.style.left = `${trail.x}px`;
                trailDiv.style.top = `${trail.y}px`;
                document.body.appendChild(trailDiv);
                setTimeout(() => {
                    trailDiv.remove();
                }, 100);
            });
            requestAnimationFrame(updateMouseTrails);
        }

        // 初始化
        const matrixCanvas = document.getElementById('matrix');
        matrixCanvas.width = window.innerWidth;
        matrixCanvas.height = window.innerHeight;
        const particleSystem = new BinaryParticle(matrixCanvas);
        particleSystem.draw();

        updateMouseTrails();
    </script>
</body>
</html>



